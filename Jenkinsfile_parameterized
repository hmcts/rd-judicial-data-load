#!groovy
@Library("Infrastructure") _

properties([
  parameters([
      string(name: 'PRODUCT_NAME', defaultValue: 'rd', description: ''),
      string(name: 'APP', defaultValue: 'judicial-data-load', description: 'judicial Reference Data API'),
      string(name: 'TYPE', defaultValue: 'java', description: ''),
      string(name: 'ENVIRONMENT', defaultValue: 'sandbox', description: 'Environment where code should be build and deployed'),
      choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')

  ])
])

String type = "java"
String product = "rd"
String component = "judicial-data-load"

def secrets = [
    's2s-${env}': [    
    secret('microservicekey-rd-judicial-data-load', 'S2S_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

withParameterizedPipeline(type, product, component, 'sandbox', 'sandbox') {

    overrideVaultEnvironments(vaultOverrides)
    setVaultName('rd')
    loadVaultSecrets(secrets)

    enableDbMigration()
    enableDockerBuild()

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }
}
