#!groovy
@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "rd"
def component = "judicial-data-load"


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

def secrets = [
    'rd-${env}': [
        secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
        secret('ACCOUNT-NAME', 'ACCOUNT_NAME'),
        secret('ACCOUNT-KEY', 'ACCOUNT_KEY'),
        secret('LD-SDK-KEY', 'RD_LD_SDK_KEY'),
        secret('OAUTH2-AUTH', 'OAUTH2_AUTH'),
        secret('OAUTH2-CLIENT-AUTH', 'OAUTH2_CLIENT_AUTH')
    ]
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

GradleBuilder builder = new GradleBuilder(this, product)
withPipeline(type, product, component) {

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    onMaster {
        env.execution_environment = "aat"
    }
    onPR {
        env.execution_environment = "preview"
    }

    disableLegacyDeployment()
    enableAksStagingDeployment()

    nonServiceApp()

    // Sync demo and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

   after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'

    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('akschartsinstall') {

//        def sleepTime = (env.BRANCH_NAME.startsWith("PR")) ? '210s' : '120s'
//        sh "sleep ${sleepTime}"
//        if (env.BRANCH_NAME.startsWith("PR")) {
//            withAksClient('nonprod', product) {
//
//                def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
//                def subscription = env.SUBSCRIPTION_NAME
//                def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
//                def serviceBusSecret = "servicebus-secret-topic-${aksServiceName}-servicebus-jrd-aks-topic"
//                def blobSecret = "storage-secret-${aksServiceName}"
//
//                def namespace = new TeamConfig(this).getNameSpace(product)
//                def kubectl = new Kubectl(this, subscription, namespace)
//                kubectl.login()
//                env.serviceBusSecretString = kubectl.getSecret(serviceBusSecret, namespace, "{.data.connectionString}")
//                env.BLOB_ACCOUNT_NAME = kubectl.getSecret(blobSecret, namespace, "{.data.storageAccountName}")
//                env.BLOB_ACCOUNT_KEY = kubectl.getSecret(blobSecret, namespace, "{.data.accessKey}")
//            }
//        }
//
//            try {
//                builder.gradle('functional')
//            } finally {
//                junit '**/test-results/**/*.xml'
//                junit 'build/test-results/functional/**/*.xml'
//                archiveArtifacts 'build/reports/tests/functional/index.html'
//
//                publishHTML target: [
//                        allowMissing         : true,
//                        alwaysLinkToLastBuild: true,
//                        keepAll              : true,
//                        reportDir            : "build/reports/tests/functional",
//                        reportFiles          : "index.html",
//                        reportName           : "JRD Functional Test Report"
//                ]
//            }
        }
}