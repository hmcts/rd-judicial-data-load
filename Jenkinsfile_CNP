#!groovy
@Library("Infrastructure")
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "rd"
def component = "judicial-data-load"


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

def secrets = [
    'rd-${env}': [
        secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
        secret('ACCOUNT-NAME', 'ACCOUNT_NAME'),
        secret('ACCOUNT-KEY', 'ACCOUNT_KEY')
    ]
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

GradleBuilder builder = new GradleBuilder(this, product)
withPipeline(type, product, component) {

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    onMaster {
        env.execution_environment = "aat"
    }
    onPR {
        withAksClient('nonprod', product) {
            env.execution_environment = "preview"

            def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
            def subscription = env.SUBSCRIPTION_NAME
            def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
            def serviceBusSecret = "servicebus-secret-topic-${aksServiceName}-servicebus-jrd-aks-topic"

            def namespace = new TeamConfig(this).getNameSpace(product)
            def kubectl = new Kubectl(this, subscription, namespace)
            kubectl.login()

            env.serviceBusSecretString = kubectl.getSecret(serviceBusSecret, namespace, "{.data.connectionString}")
        }
    }

    disableLegacyDeployment()
    enableAksStagingDeployment()

    nonServiceApp()
nv
    // Sync demo and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

   after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'

    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('akschartsinstall') {
        def time = "120"
        echo "Waiting ${time} seconds for deployment to complete prior starting functional testing"
        sleep time.toInteger() // seconds
        try {
            builder.gradle('functional')
        } finally {
            junit '**/test-results/**/*.xml'
            junit 'build/test-results/functional/**/*.xml'
            archiveArtifacts 'build/reports/tests/functional/index.html'

            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/functional",
                    reportFiles          : "index.html",
                    reportName           : "JRD Functional Test Report"
            ]
        }
    }
}