#!groovy

properties([
        pipelineTriggers([cron('21 01 * * *')]), // scheduling to trigger jenkins job
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: 'https://rd-judicial-data-load-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
            string(name: 'SecurityRules',
                defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                description: 'The URL you want to run these tests against'),
        ])
]) 

@Library("Infrastructure")
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "rd"
def component = "judicial-data-load"


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

def secrets = [
        'rd-${env}': [
                secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
                secret('ACCOUNT-NAME', 'ACCOUNT_NAME'),
                secret('ACCOUNT-KEY', 'ACCOUNT_KEY'),
                secret('LD-SDK-KEY', 'RD_LD_SDK_KEY')
        ]
]

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {

    env.TEST_URL = "http://rd-judicial-data-load-aat.service.core-compute-aat.internal"
    env.Rules = params.SecurityRules
    env.execution_environment = "aat"

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableMutationTest()
    enableSecurityScan()


    after('securityScan') {
        def sleepTime = (env.BRANCH_NAME.startsWith("PR")) ? '210s' : '120s'
        sh "sleep ${sleepTime}"
        if (env.BRANCH_NAME.startsWith("PR")) {
            withAksClient('nonprod', product) {

                def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
                def subscription = env.SUBSCRIPTION_NAME
                def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
                def serviceBusSecret = "servicebus-secret-topic-${aksServiceName}-servicebus-jrd-aks-topic"

                def namespace = new TeamConfig(this).getNameSpace(product)
                def kubectl = new Kubectl(this, subscription, namespace)
                kubectl.login()
                env.serviceBusSecretString = kubectl.getSecret(serviceBusSecret, namespace, "{.data.connectionString}")
            }
        }
        try {
            builder.gradle('functional')
        } finally {
            junit '**/test-results/**/*.xml'
            junit 'build/test-results/functional/**/*.xml'
            archiveArtifacts 'build/reports/tests/functional/index.html'

            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/functional",
                    reportFiles          : "index.html",
                    reportName           : "JRD Functional Test Report"
            ]
        }
    }

}
